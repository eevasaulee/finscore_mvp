import streamlit as st
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

st.set_page_config(page_title="finscore.ai", layout="centered")
st.title("finscore.ai ‚Äî –°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–∫–æ—Ä–∏–Ω–≥")

st.markdown("""
### üí° –î–µ–º–æ–≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏
–≠—Ç–æ –¥–µ–º–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ AI –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
""")

# === –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
st.subheader("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:")
age = st.slider("–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ (AGE)", 18, 100, 35)
income = st.number_input("–î–æ—Ö–æ–¥ (INCOME)", min_value=0, value=50000)
yoj = st.slider("–°—Ç–∞–∂ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã (YOJ)", 0, 40, 5)
car_age = st.slider("–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è (CAR_AGE)", 0, 20, 5)
oldclaim = st.number_input("–°—É–º–º–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–ø–ª–∞—Ç (OLDCLAIM)", min_value=0.0, value=0.0)
clm_freq = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π (CLM_FREQ)", 0, 10, 0)
car_type = st.selectbox("–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è (CAR_TYPE)", options=["Minivan", "SUV", "Sports Car", "Pickup", "Panel Truck", "Van"])
red_car = st.selectbox("–ú–∞—à–∏–Ω–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (RED_CAR)", options=["yes", "no"])
revoked = st.selectbox("–ü—Ä–∞–≤–∞ –±—ã–ª–∏ –æ—Ç–æ–±—Ä–∞–Ω—ã (REVOKED)", options=["yes", "no"])
urbanicity = st.selectbox("–ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (URBANICITY)", options=["Urban", "Highly Urban"])
mstatus = st.selectbox("–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (MSTATUS)", options=["Yes", "No"])
parent1 = st.selectbox("–ï—Å—Ç—å –ª–∏ –¥–µ—Ç–∏ (PARENT1)", options=["Yes", "No"])

# === –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ ===
car_type_map = {k: i for i, k in enumerate(["Minivan", "SUV", "Sports Car", "Pickup", "Panel Truck", "Van"])}
red_car_map = {"yes": 1, "no": 0}
revoked_map = {"yes": 1, "no": 0}
urbanicity_map = {"Urban": 0, "Highly Urban": 1}
mstatus_map = {"Yes": 1, "No": 0}
parent1_map = {"Yes": 1, "No": 0}

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–∞—Å—Å–∏–≤
X_input = np.array([[age, income, yoj, car_age, oldclaim, clm_freq,
                     car_type_map[car_type], red_car_map[red_car], revoked_map[revoked],
                     urbanicity_map[urbanicity], mstatus_map[mstatus], parent1_map[parent1]]])

# === –ú–æ–¥–µ–ª—å (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è, –æ–±—É—á–µ–Ω–∞ —Ä–∞–Ω–µ–µ) ===
# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞
np.random.seed(42)
X_demo = np.random.randint(0, 100, size=(500, 12))
y_demo = np.random.choice([0, 1], size=500, p=[0.75, 0.25])

model = RandomForestClassifier()
model.fit(X_demo, y_demo)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
if st.button("–û—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫"):
    prob = model.predict_proba(X_input)[0][1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è

    if prob > 0.7:
        level = "üü• –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        advice = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —É—Å–ª–æ–≤–∏–π."
    elif prob > 0.4:
        level = "üü® –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        advice = "–ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é."
    else:
        level = "üü© –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        advice = "–ú–æ–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."

    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏")
    st.write(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è:** {prob:.2f}")
    st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞:** {level}")
    st.info(advice)
